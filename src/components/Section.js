/**
 * Класс отвечающий за отрисовку элементов на странице
 */
export default class Section {
  /**
   * @consctructor
   * @param {Array} items Массив данных, которые нужно добавить на страницу
   * @param {Function} renderer Функция, которая отвечает за создание и отрисовку данных на странице
   * @param {string} containerSelector Cелектор контейнера, в который нужно добавлять элементы
   */
  constructor({ items, renderer }, containerSelector) {
    this._renderedItems = items;
    this._renderer = renderer;

    this._container = document.querySelector(containerSelector);
  }

  /**
   * Функция отрисовки всех элементов
   */
  renderItems() {
    this._renderedItems.forEach(item => this._renderer(item));
  }

  // Поскольку метод forEach в функции renderItems проходит по массиву
  // в прямом порядке, в функции _renderer новые элементы должны добавляться
  // в конец контейнера, чтобы отрисовываться в том же порядке в котором они
  // находятся в массиве. Однако при дабавлении новой карточки через
  // форму она должна быть добавлена в начало контейнера, чтобы отрисоваться вверху
  // сетки карточек. Эту проблему можно было бы решить реализовав одну функцию addItem, которая
  // добавляет карточки в начало контейнера, при этом сделав перебор массива в
  // обратном направлении при помощи Array.slice().reverse(), но в таком случае создается копия
  // массива что может негативно сказатся на скорости загрузки страницы. Также можно было бы
  // добавить в функцию addItem в качестве второго параметра флаг, который бы определял в какое
  // место контейнера добавлять карточку, но это сделало бы код сложнее для понимания. Поэтому я
  // решил просто создать две функции.

  /**
   * Фукнция добавления DOM-элемента в начало контейнера
   * @param {element} item DOM-элемент, который нужно добавить в контейнер
   */
   addItemToBegin(item) {
    this._container.prepend(item);
  }

  /**
   * Фукнция добавления DOM-элемента в конец контейнера
   * @param {element} item DOM-элемент, который нужно добавить в контейнер
   */
  addItemToEnd(item) {
    this._container.append(item);
  }
}
